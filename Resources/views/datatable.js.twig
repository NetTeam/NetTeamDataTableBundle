{% macro bVisible(loop) %}
{# nie dzia≈Ça razem z bStateSave: true #}
{% spaceless %}"bVisible": {{ column.isVisible ? 'true' : 'false' }}{% endspaceless %}
{% endmacro %}

{% macro bSortable(column) %}
{% spaceless %}"bSortable": {{ column.isSortable ? 'true' : 'false' }}{% endspaceless %}
{% endmacro %}

{% macro sClass(column) %}
{% spaceless %}"sClass": "{{ column.getClass }}"{% endspaceless %}
{% endmacro %}

{% macro sWidth(column) %}
{% spaceless %}"sWidth": {% if column.hasWidth %}"{{ column.getWidth }}"{% else %}null{% endif %}{% endspaceless %}
{% endmacro %}

$(document).ready(function() {
       var dTable = $('#datatables_table_{{ alias }}').dataTable( {
            {% if datatable.visibleHeight %}"sScrollY": "{{datatable.visibleHeight|raw}}",
            {% endif -%}
            {% if datatable.visibleWidth %}"sScrollX": "{{datatable.visibleWidth|raw}}",
            {% endif -%}
            {% if datatable.minWidth %}"sScrollXInner": "{{datatable.minWidth|raw}}",
            {% endif -%}
            "bScrollCollapse": true,
            "aoColumns": [
                {% if datatable.bulkActions %}
                    { "bSortable": false, {{ _self.sClass(datatable.bulkActionsColumn) }}, {{ _self.sWidth(datatable.bulkActionsColumn) }} },
                {% endif %}
                {% for key, column in datatable.columns %}
                    { {{ _self.bSortable(column) }}, {{ _self.sClass(column) }}, {{ _self.sWidth(column) }} } {% if not loop.last %}, {% endif %}
                {% endfor %}
            ],
            "aaSorting": [
                {% for key, column in datatable.getColumnsSortedByDefault() %}
                    [ {{ key }}, '{{ column.getDefaultSorting() }}' ]{% if not loop.last %}, {% endif %}
                {% endfor %}
            ],
            "iDisplayLength": 25,
            "bRetrieve": true,
            "aLengthMenu": [[25, 50, 100, 200, 500], [25, 50,100,200,500]],
            "bJQueryUI" : {{ datatable.hasJQueryUI() ? 'true' : 'false' }},
            "bAutoWidth" : false,
            "bStateSave" : true,
            "fnStateSave": function (oSettings, oData) {
                localStorage.setItem( 'datatables_{{ alias }}', JSON.stringify(oData) );
            },
            "fnStateLoad": function (oSettings) {
                var data = localStorage.getItem('datatables_{{ alias }}');
                return JSON.parse(data);
            },
            "fnServerData": function ( sSource, aoData, fnCallback, oSettings ) {
                oSettings.jqXHR = $.ajax( {
                    "dataType": 'json',
                    "type": "GET",
                    "url": sSource,
                    "data": aoData,
                    "success": function(json) {
                        $('#datatables_table_{{ alias }}').trigger("dTable.serverData", json);
                        fnCallback(json);
                        $('#bulk-all-checkbox-{{ alias }}').attr('checked',false);
                    },
                });
            },
            "sPaginationType": "full_numbers",
            {% if datatable.hasJQueryUI() %}
              "sDom": 'T<"clear"><"H"l{{ datatable.hasGlobalSearch ? 'f' : '' }}r>t<"F"ip>',
            {% else %}
              "sDom": 'T<"clear">l{{ datatable.hasGlobalSearch ? 'f' : '' }}rtip',
            {% endif %}
            "sAjaxSource": "{{ path(datatable.route, datatable.routeParameters)|raw }}",
            "oLanguage": {% include "NetTeamDataTableBundle::lang.txt.twig" %},
            "bProcessing": true,
            {% if not datatable.isSimple %}
                "bServerSide": true,
            {% endif %}
            {% if datatable.hasPagination %}
                "sPaginationType": "full_numbers",
            {% endif %}

            "bPaginate": {{ datatable.hasPagination() ? 'true' : 'false' }},
            "bInfo": {{ datatable.hasPagination() ? 'true' : 'false' }},
            "bFilter": {{ datatable.hasPagination() ? 'true' : 'false' }},
            "fnServerParams": function (data) {
                if (typeof NtFilters == "undefined" || typeof NtFilters.getFiltersParams != "function") {
                    alert('NtFilters.js required');
                    return data;
                }
                filterParams = NtFilters.getFiltersParams('{{ alias }}');
                $.merge(data, filterParams);
                return data;
            }
        });

      var bulk = (function(alias, dataTable) {
          var SELECTORS = {
                  FILTERS_FORM : '#datatables_div_' + alias + ' form.filters',
                  FILTER_BUTTON : '#form-filter-'+alias+' button.filter-apply-button',
                  APPLY_BUTTON : '#bulk-apply-button-' + alias,
                  ACTION_SELECT : '#bulk-action-select-' + alias,
                  ALL_ITEMS_CHECKBOX : '#bulk-all-checkbox-' + alias,
                  ITEMS : ':checkbox[id^="bulk-row-' + alias + '"]',
                  CHECKED : ':checked'
              },
              URL_SEPARATOR = ',',
              URL_REPLACE_VALUE = '$values',
              TEXTS = {
                  NO_RECORD_SELECTED : '{{ 'no_record_selected'|trans({}, 'datatable') }}',
                  NO_ACTION_SELECTED : '{{ 'no_action_selected'|trans({}, 'datatable') }}',
              },
              Bulk = {
                  URL_SEPARATOR: URL_SEPARATOR,
                  URL_REPLACE_VALUE: URL_REPLACE_VALUE,
                  action: "",
                  getSelected: getSelected,
                  isValid: isValid,
                  refresh: refresh,
                  generateUrl: generateUrl,
                  switchAll: switchAll,
                  check: function(selected) {
                      $(SELECTORS.ITEMS).each(function() {
                          checkbox = $(this);
                          if (-1 < $.inArray(checkbox.val(), selected)) {
                              checkbox.attr('checked', 'checked');
                          }
                      });
                  },
                  uncheck: function (selected) {
                      $(SELECTORS.ITEMS + SELECTORS.CHECKED).each(function() {
                          checkbox = $(this);
                          if (-1 < $.inArray(checkbox.val(), selected)) {
                              checkbox.removeAttr('checked');
                          }
                      });
                  }
              };

          function init() {
              $(SELECTORS.FILTERS_FORM).submit(function (event) {
                  event.preventDefault();
                  event.stopImmediatePropagation();
                  refresh();
                  return false;
              });
              $(SELECTORS.FILTER_BUTTON).click(refresh);
              $(SELECTORS.APPLY_BUTTON).click(goToAction);
              $(SELECTORS.ALL_ITEMS_CHECKBOX).change(switchAll);
          }

          function getSelected() {
              var selected = [];
              $(SELECTORS.ITEMS + SELECTORS.CHECKED).each(function(index, value) {
                  selected.push($(value).val());
              });
              return selected;
          }

          function generateUrl(action, selected){
              var urlParams = {};
              urlParams[URL_REPLACE_VALUE] = selected.join(URL_SEPARATOR);
              url = Utils.Url.populateVars(
                  action,
                  urlParams
              );
              return url;
          }

          function isValid(action, selected) {
              if (!action) {
                  alert(TEXTS.NO_ACTION_SELECTED);
                  return false;
              }

              if (0 === selected.length) {
                  alert(TEXTS.NO_RECORD_SELECTED);
                  return false;
              }
              return true;
          }

          function goToAction(event) {
              var url,
                  selected,
                  beforeSend = $.Event('beforeSend.bulk');

              Bulk.action = $(SELECTORS.ACTION_SELECT).val()

              if (typeof dataTable !== 'undefined') {
                  dataTable.trigger(beforeSend, Bulk);
              }
              selected = getSelected();
              if(!isValid(Bulk.action, selected)){
                 return false;
              }
              url = generateUrl(Bulk.action, selected);

              if (typeof dataTable === 'undefined') {
                  if (typeof tab_open === 'function') {
                      tab_open(url);
                      return;
                  }
                  window.location = url;
              }
              if (!beforeSend.isDefaultPrevented()) {
                  $.getJSON(url, function(json) {
                      $('#datatables_table_{{ alias }}').trigger("Bulk.onSubmit", json);
                      refresh();
                  });
                  event.preventDefault();
                  event.stopImmediatePropagation();
              }
          }

          function switchAll() {
              var items = $(SELECTORS.ITEMS);

              if ($(this).is(SELECTORS.CHECKED)) {
                  items.attr('checked', 'checked');
                  return;
              }
              items.removeAttr('checked');
          }

          function refresh() {
              dataTable.fnDraw();
          }

          init();

          return Bulk;
      })('{{ alias }}', dTable);

      var action = (function(alias, dataTable) {
          var SELECTORS = {
                  FILTERS_FORM : '#datatables_div_' + alias + ' form.filters',
                  FILTER_BUTTON : '#form-filter-'+alias+' button.filter-apply-button',
                  APPLY_BUTTON : '#action-apply-button-' + alias,
                  ACTION_SELECT : '#action-select-' + alias,
              },
              Action = {
                  action: '',
                  refresh: refresh,
                  generateUrl: generateUrl,
              };

          function init() {
              $(SELECTORS.FILTERS_FORM).submit(function (event) {
                  event.preventDefault();
                  event.stopImmediatePropagation();
                  refresh();
                  return false;
              });
              $(SELECTORS.FILTER_BUTTON).click(refresh);
              $(SELECTORS.APPLY_BUTTON).click(goToAction);
          }

          function generateUrl(action){
              url = Utils.Url.populateVars(
                  action
              );
              return url;
          }

          function goToAction(event) {
              var url,
                  beforeSend = $.Event('beforeSend.action');

              Action.action = $(SELECTORS.ACTION_SELECT).val()

              if (typeof dataTable !== 'undefined') {
                  dataTable.trigger(beforeSend, Action);
              }
              url = generateUrl(Action.action);

              if (typeof dataTable === 'undefined') {
                  if (typeof tab_open === 'function') {
                      tab_open(url);
                      return;
                  }
                  window.location = url;
              }
              if (!beforeSend.isDefaultPrevented()) {
                  $.getJSON(url, refresh);
              }
          }

          function refresh() {
              dataTable.fnDraw();
          }

          init();

          return Action;
        })('{{ alias }}', dTable);


    {% if datatable.hasEditInPlaceActions %}

        var editInPlace = (function(document, Utils, dataTable, editUrl, saveUrl) {

                var SELECTORS = {
                        TD: 'td',
                        TR: 'tr',
                        CHILDREN_TD: '>td',
                        EDIT: '.editInPlaceEdit.edit',
                        SAVE: '.editInPlaceEdit.save',
                        CANCEL: '.editInPlaceEdit.cancel',
                        INPUT: 'input',
                        INPUT_HIDDEN: 'input:hidden',
                        FORM_ELEMENTS: 'input, textarea, select',
                        DIALOG: '.dialog',
                        ERRORS: '.errors',
                        DATA_COLUMN: '[data-column="%index%"]'
                    },
                    EDIT_IN_PLACE = 'edit-in-place',
                    current;

                function editRow (dataTable, row, editedElement) {

                    var tds = $(SELECTORS.CHILDREN_TD, row),
                        save = tds.find(SELECTORS.SAVE),
                        cancel = tds.find(SELECTORS.CANCEL);

                    tds.find(SELECTORS.EDIT).hide();
                    save.show();
                    save.on('click', function (e) {
                        editedElement = $(this).data(EDIT_IN_PLACE);
                        e.preventDefault();
                        saveRow(dataTable, row, editedElement);
                    });
                    cancel.show();
                    cancel.on('click', function(e) {
                        e.preventDefault();
                        restoreRow(dataTable, row);
                    })

                    $.ajax({
                        type: 'GET',
                        url: Utils.Url.populateVars(editUrl, {'%id%': editedElement}),
                        success: function(response) {
                            var field;

                            response = $(response);

                            tds.each(function(index, td) {
                                field = response.find(SELECTORS.DATA_COLUMN.replace('%index%', index));

                                if (field.html() !== undefined) {
                                    $(td).html(field);
                                }
                            });
                            tds.last().append(response.find(SELECTORS.INPUT_HIDDEN));
                        }
                    });
                }

            function saveRow (dataTable, row, editedElement) {
                var inputs = $(SELECTORS.INPUT, row),
                    tds = $(SELECTORS.CHILDREN_TD, row),
                    data = tds.find(SELECTORS.FORM_ELEMENTS).serialize();

                tds.find(SELECTORS.EDIT).hide();
                tds.find(SELECTORS.SAVE).show();

                $.ajax({
                    type: 'POST',
                    url: Utils.Url.populateVars(saveUrl, {'%id%': editedElement}),
                    data: data,
                    success: function(response) {

                        response = $(response);

                        if (response.find(SELECTORS.ERRORS).text().length) {
                            (new DialogBox({
                                dialog: {
                                    width: 650,
                                    position: ['center', 50],
                                    resizable: true
                                },
                                content: response.find(SELECTORS.DIALOG)
                            })).open();
                            return;
                        }
                        dataTable.fnDraw();

                        if (messages) {
                            messages.add(Translator.get('messages:position.updated'));
                        }
                    }
                });
            }

            function restoreRow (dataTable, row) {

                var data = dataTable.fnGetData(row),
                    tds = $(SELECTORS.CHILDREN_TD, row);

                tds.each(function(index) {
                    dataTable.fnUpdate(data[index], row, index, false);
                });
            }

            if ($(SELECTORS.TD, dataTable.fnGetNodes())) {

                $(document).on('click', SELECTORS.EDIT, function (e) {
                    var self = $(this),
                        editedElement = self.data(EDIT_IN_PLACE),
                        row = self.parents(SELECTORS.TR).get(0);

                    e.preventDefault();

                    if (current && current !== row) {
                        restoreRow(dataTable, current);
                    }
                    editRow(dataTable, row, editedElement);
                    current = row;
                });
            };
        })(
            document,
            Utils,
            dTable,
            '{{ path(datatable.getEditInPlaceEditAction, {'id' : '%id%'}) }}',
            '{{ path(datatable.getEditInPlaceSaveAction, {'id' : '%id%'}) }}'
        );
    {% endif %}

      {% if datatable.hasAdditionalJSTemplate() %}
          {% include datatable.getAdditionalJSTemplate()  %}
      {% endif %}
} );
